{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","Covid19.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","style","backgroundColor","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changableurl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","options","scales","xAxes","gridLines","display","yAxes","BarChart","legend","title","text","CountryPicker","handleCountryChange","fetchedCountires","setFetchedCountires","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","footer","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d159d21.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__RflIB\",\"card\":\"Cards_card__2aHgZ\",\"infected\":\"Cards_infected__fVdJu\",\"recovered\":\"Cards_recovered__2TTL2\",\"deaths\":\"Cards_deaths__3grBM\",\"btnMyGov\":\"Cards_btnMyGov__1nDwY\",\"btnGrid\":\"Cards_btnGrid__P0Lgu\"};","import React from 'react';  \r\nimport styles from './Cards.module.css'  \r\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core';  \r\nimport CountUp from 'react-countup';  \r\nimport cx from 'classnames';  \r\nimport Button from '@material-ui/core/Button';  \r\n  \r\n  \r\n  \r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } } ) => {  \r\n     if(!confirmed){  \r\n        return 'Please wait..';  \r\n    }  \r\n   console.log(lastUpdate);  \r\n    return (  \r\n        <div className={styles.container}>  \r\n            <Grid container spacing = {3} justify=\"center\">  \r\n                <Grid style={{backgroundColor: 'rgba(208, 208, 241, 0.5)'}} item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>  \r\n                    <CardContent >  \r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>  \r\n                        <Typography variant=\"h5\" >  \r\n                            <CountUp start={0} end={confirmed.value} duration={3} separator=\",\" />  \r\n                        </Typography>  \r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>                \r\n                        <Typography variant=\"body2\">Number of active cases of Covid-19</Typography>  \r\n                    </CardContent>  \r\n                </Grid>  \r\n  \r\n                <Grid style={{backgroundColor: 'rgba(188, 253, 188, 0.5)'}} item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>  \r\n                    <CardContent>  \r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>  \r\n                        <Typography variant=\"h5\" >  \r\n                            <CountUp start={0} end={recovered.value} duration={3} separator=\",\" />  \r\n                        </Typography>  \r\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>  \r\n                        <Typography variant=\"body2\">Number of recoveries from Covid-19</Typography>  \r\n                    </CardContent>  \r\n                </Grid>  \r\n  \r\n                <Grid style={{backgroundColor: 'rgba(245, 192, 192, 0.5)'}}  item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>  \r\n                    <CardContent>  \r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>  \r\n                        <Typography variant=\"h5\" >  \r\n                            <CountUp start={0} end={deaths.value} duration={3} separator=\",\" />  \r\n                        </Typography>  \r\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>  \r\n                        <Typography variant=\"body2\">Number of deaths caused by Covid-19</Typography>  \r\n                    </CardContent>  \r\n                </Grid>  \r\n  \r\n                \r\n            </Grid>  \r\n        </div>  \r\n        )  \r\n}  \r\nexport default Cards; ","import axios from 'axios';  \r\n  \r\nconst url ='https://covid19.mathdro.id/api';  \r\n  \r\nexport const fetchData = async (country) => {  \r\n    let changableurl = url;  \r\n    if(country){  \r\n        changableurl = `${url}/countries/${country}`  \r\n    }  \r\n    try {  \r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changableurl);  \r\n        return {confirmed, recovered, deaths, lastUpdate};  \r\n    }  \r\n    catch(error){  \r\n        console.log(error);  \r\n    }  \r\n};  \r\n  \r\nexport const fetchDailyData = async () =>{  \r\n    try{  \r\n        const {data}  = await axios.get(`${url}/daily`);  \r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));  \r\n    }  \r\n    catch(error){  \r\n        return error  \r\n    }  \r\n};  \r\n  \r\nexport const fetchCountries = async () =>{  \r\n    try{  \r\n    const {data:{countries}} = await axios.get(`${url}/countries`);  \r\n    return countries.map((country)=> country.name);  \r\n    }     \r\n    catch(error){  \r\n        return error  \r\n    }  \r\n}; ","import React,{useState, useEffect} from 'react';  \r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';  \r\nimport styles from './Chart.module.css'  \r\nimport { Container } from '@material-ui/core';  \r\n  \r\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {  \r\n    //this is a set representation with setter method of a state  \r\n    const [dailyData, setDailyData] = useState([]);  \r\n      \r\n    useEffect(() => {  \r\n    const fetchAPI = async()=>{  \r\n        setDailyData(await fetchDailyData());  \r\n        }  \r\n        fetchAPI();  \r\n    },[]);  \r\n  \r\nconst lineChart =(  \r\n    dailyData.length ? (   \r\n        <Line data={{  \r\n                        labels: dailyData.map(({date}) =>  date),  \r\n                        datasets :[{  \r\n                            data :  dailyData.map(({confirmed}) =>  confirmed),  \r\n                            label: 'Infected',  \r\n                            borderColor: '#3333ff',  \r\n                            fill: true,  \r\n                        },  \r\n                        {  \r\n                            data :  dailyData.map(({deaths}) =>  deaths),  \r\n                            label: 'Deaths',  \r\n                            borderColor: 'red',  \r\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',  \r\n                            fill: true,  \r\n                        }]  \r\n                    }}  \r\n                    options={ {  \r\n                        scales : { xAxes : [ { gridLines : { display : false } } ], yAxes : [ { gridLines : { display : false } } ] }  \r\n                    } }  \r\n                    />):null  \r\n                    );  \r\n  \r\nconst BarChart  =(  \r\n       confirmed?(  \r\n        <Bar  \r\n        data={{  \r\n            labels: ['Infected', 'Recovered', 'Deaths'],  \r\n            datasets:[{  \r\n                label:'People',  \r\n                backgroundColor:['rgba(108, 10, 235, 0.5)','rgba(60, 165, 12, 0.89)', 'rgba(179, 13, 13, 0.829)' ],  \r\n                data:[confirmed.value, recovered.value, deaths.value]  \r\n            }]  \r\n        }}  \r\n        options={{  \r\n            legend:{display:false},  \r\n            title: {display:true, text:`current state in ${country}`}  \r\n        }}  \r\n        />             \r\n        ): null  \r\n    )  \r\n    return (  \r\n     <div className={styles.container}>  \r\n         {country? BarChart : lineChart}  \r\n     </div>  \r\n    )  \r\n}  \r\nexport default Chart; ","import React, {useState, useEffect} from 'react';  \r\nimport {NativeSelect, FormControl} from '@material-ui/core';  \r\nimport styles from './CountryPicker.module.css';  \r\nimport {fetchCountries} from '../../api';  \r\nconst CountryPicker = ({handleCountryChange}) => {  \r\nconst [fetchedCountires, setFetchedCountires] = useState([]);  \r\n  \r\nuseEffect(()=>{  \r\n    const fetchAPI = async () =>{  \r\n        setFetchedCountires(await fetchCountries());  \r\n    }  \r\n    fetchAPI();  \r\n}, [setFetchedCountires])  \r\nconsole.log(fetchedCountires);  \r\n    return (  \r\n        <FormControl  className={styles.formControl}>      \r\n        <NativeSelect defaultValue=\"\" onChange ={(e) => handleCountryChange(e.target.value)}  variant=\"filled\">  \r\n            <option value=\"\">Global</option>  \r\n    {fetchedCountires.map((country,i) => <option key={i} value={country}>{country}</option>)}  \r\n        </NativeSelect>  \r\n        </FormControl >  \r\n    )  \r\n}  \r\nexport default CountryPicker; ","import React, { Component } from 'react';\r\nimport styles from './App.module.css';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport { fetchData } from './api'; \r\nimport coronaImage from './Covid19.png';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tdata: {},\r\n\t\tcountry: '',\r\n\t} \r\n\r\n\tasync componentDidMount() {\r\n\t\tconst fetchedData = await fetchData();\r\n\t\tthis.setState({\r\n\t\t\tdata: fetchedData\r\n\t\t});\r\n\t}\r\n\r\n\thandleCountryChange = async (country) => {\r\n\t\tconst fetchedData = await fetchData(country); \r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tdata: fetchedData,\r\n\t\t\tcountry: country\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { data, country } = this.state;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t    <div className={styles.container}>\r\n\t\t    \t<img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\r\n\t\t    \t<Cards data={data} />\r\n\t\t    \t<CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n\t\t    \t<Chart data={data} country={country}/> \r\n\t\t    </div>\r\n\t\t    <div className={styles.footer}>By Shristi P</div>\r\n\t\t    </>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';  \nimport ReactDom from 'react-dom';  \nimport App from './App';  \n  \n//first component is App, second parameter is the element we want to render it on  \nReactDom.render(<App />, document.getElementById('root')); ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__30XTr\",\"image\":\"App_image__39vho\",\"footer\":\"App_footer__2PhiG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1MsMs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__14i64\"};","module.exports = __webpack_public_path__ + \"static/media/Covid19.d7265326.png\";"],"sourceRoot":""}